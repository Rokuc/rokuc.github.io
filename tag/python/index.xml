<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Rok&#39;s Projects</title>
    <link>https://rokuc.github.io/tag/python/</link>
      <atom:link href="https://rokuc.github.io/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 22 Sep 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://rokuc.github.io/media/icon_hub6cbf2e3867c55f0faea7610ce2a8cb5_10290_512x512_fill_lanczos_center_3.png</url>
      <title>Python</title>
      <link>https://rokuc.github.io/tag/python/</link>
    </image>
    
    <item>
      <title>Bayesian A/B Test</title>
      <link>https://rokuc.github.io/post/bayesian-ab-test/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://rokuc.github.io/post/bayesian-ab-test/</guid>
      <description>&lt;h2 id=&#34;the-purpose&#34;&gt;The purpose&lt;/h2&gt;
&lt;p&gt;In this article we would like to answer how likely it is that the Version B of our e-mail or our website is better then Version A.&lt;/p&gt;
&lt;h2 id=&#34;initial-setup&#34;&gt;Initial setup&lt;/h2&gt;
&lt;p&gt;Imagine we would like to test if adding an image or button to our Website or Email and test if it helps or hurts our conversion rate. We decide that the two E-mail variants that we will implement are one with images and one without them. As an assumption we currently have 1000 subscribers on our email. The test site without the image will be shown to 500 subscribers.&lt;/p&gt;
&lt;h2 id=&#34;prior-beliefs&#34;&gt;Prior beliefs&lt;/h2&gt;
&lt;p&gt;Now we need to know what our prior will be. &amp;ldquo;The prior&amp;rdquo; tells us how the probability of our belief about the data before taking into account the information contained in the data being analyzed is distributed. In our case we will use the beta distribution for our prior, the beta distribution helps us estimate the probability of an event.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./Beta_Priors.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The Priors can be informative (blue), weekly informative (green), or uninformative (red) depending on how confident we are about the outcome of our event.&lt;/p&gt;
&lt;h2 id=&#34;analysing-the-data&#34;&gt;Analysing the data&lt;/h2&gt;
&lt;p&gt;After collecting some data we get the following results, obviously the data will change over time, but we will discuss the automation towards the end of this article.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Clicked&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Not Clicked&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Observed conversion rate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Variant A&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;36&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;114&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Variant B&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In order to calculate the posterior distribution we will use the bellow distribution. The parameters of the Beta distribution can be viewed as the number of successful and failed trials $\alpha$ representing the number of successes, and $\beta$ showing the number of failures.&lt;/p&gt;



$$Beta(\alpha_{post.}, \beta_{post.}) = Beta(\alpha_{prior} + \alpha_{likelihood}, \beta_{prior} + \beta_{likelihood})$$

&lt;h3 id=&#34;answering-our-questions-in-python&#34;&gt;Answering our questions in python&lt;/h3&gt;
&lt;p&gt;In order to get to our results we will need to do a Monte Carlo simulation. In order to do this we will use the NumPy and SciPy library, however before we do that we should recreate the table above in a Pandas DataFrame.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;d = {&amp;#39;Clicked&amp;#39;: [36, 50], &amp;#39;Not_Clicked&amp;#39;: [114, 100]}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;df = pd.DataFrame(data=d)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have the data we can move on to creating generate a few samples with our data. and seeing the results&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;n_trials = 100000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prior_a = 3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prior_b = 7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a_samples = stats.beta(prior_a + df.loc[0,&amp;#39;Clicked&amp;#39;],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       prior_b + df.loc[0,&amp;#39;Not_Clicked&amp;#39;]).rvs(n_trials)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;b_samples = stats.beta(prior_a + df.loc[1,&amp;#39;Clicked&amp;#39;],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                       prior_b + df.loc[1,&amp;#39;Not_Clicked&amp;#39;]).rvs(n_trials)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;np.sum(a_samples &amp;lt; b_samples)/n_trials
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our case the result returns ~96%, this indicates that variant B will outperform variant A in 96 out of 100 trials.&lt;/p&gt;
&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;
&lt;p&gt;Automation is always a tricky subject, hence the workflow should be well understood by the engineer working on this&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
